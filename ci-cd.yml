name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './src/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: npm run build

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      env:
        SQLALCHEMY_DATABASE_URI: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        pytest --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy
  deploy:
    needs: [frontend-test, backend-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build Docker image
      run: |
        docker build -t bori-birthday-app:${{ github.sha }} .
        docker tag bori-birthday-app:${{ github.sha }} bori-birthday-app:latest
    
    - name: Push to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
        docker tag bori-birthday-app:${{ github.sha }} ${{ secrets.ACR_NAME }}.azurecr.io/bori-birthday-app:${{ github.sha }}
        docker tag bori-birthday-app:${{ github.sha }} ${{ secrets.ACR_NAME }}.azurecr.io/bori-birthday-app:latest
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/bori-birthday-app:${{ github.sha }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/bori-birthday-app:latest
    
    - name: Deploy to Azure App Service
      run: |
        az webapp config container set --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --docker-custom-image-name ${{ secrets.ACR_NAME }}.azurecr.io/bori-birthday-app:${{ github.sha }}
    
    - name: Run database migrations
      run: |
        az webapp ssh --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --command "python -c 'from app import app, db; app.app_context().push(); db.create_all()'"
    
    - name: Health check
      run: |
        sleep 30
        curl -f https://${{ secrets.APP_NAME }}.azurewebsites.net/health || exit 1
